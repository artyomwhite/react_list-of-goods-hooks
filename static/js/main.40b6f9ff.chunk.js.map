{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","byDefault","sortType","setSortType","isReversed","setIsReversed","goods","sortBy","preparedGoods","sort","good1","good2","byAsc","localeCompare","byLength","length","reverse","getPreparedGoods","currentSortType","query","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,iBAAAA,I,uBAAAA,I,0BAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,WAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA7BR,SACEA,EACAC,EACAH,GAEA,IAAMI,EAAa,YAAOF,GAiB1B,OAfAE,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,GACN,KAAKV,EAASe,MACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAITX,GACFI,EAAcQ,UAGTR,EAOOS,CAAiBnB,EAAiBI,EAAUE,GAOpDc,EAAkB,SAACC,GAAD,OAAqB,WACvCA,IAAUjB,GAIdC,EAAYgB,KAGd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAASJ,EAAgBrB,EAASe,OAClCQ,UAAWG,IACT,SACA,UACA,CAAE,WAAYrB,IAAaL,EAASe,QANxC,iCAYA,wBACES,KAAK,SACLD,UAAWG,IACT,SACA,aACA,CAAE,WAAYrB,IAAaL,EAASiB,WAEtCQ,QAASJ,EAAgBrB,EAASiB,UAPpC,4BAYA,wBACEO,KAAK,SACLD,UAAS,4BAAuBG,IAAG,CACjC,YAAanB,KAEfkB,QAAS,kBAAMjB,GAAeD,IALhC,sBAWGF,IAAaL,EAASI,WAAaG,IAElC,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QAxDQ,WAClBnB,EAAYN,EAASI,WACrBI,GAAc,IAmDN,sBAWN,6BACGC,EAAMkB,KAAI,SAAAC,GAAI,OACb,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.40b6f9ff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  byAsc,\n  byLength,\n  byDefault,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortBy: SortType,\n  isReversed: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortBy) {\n      case SortType.byAsc:\n        return good1.localeCompare(good2);\n      case SortType.byLength:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.byDefault);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const goods = getPreparedGoods(goodsFromServer, sortType, isReversed);\n\n  const reset = () => () => {\n    setSortType(SortType.byDefault);\n    setIsReversed(false);\n  };\n\n  const currentSortType = (query: SortType) => () => {\n    if (query === sortType) {\n      return;\n    }\n\n    setSortType(query);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={currentSortType(SortType.byAsc)}\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.byAsc },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.byLength },\n          )}\n          onClick={currentSortType(SortType.byLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${cn({\n            'is-light': !isReversed,\n          })}`}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.byDefault || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset()}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}